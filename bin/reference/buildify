#!/bin/bash

## See style-guide
## https://google.github.io/styleguide/shell.xml#Function_Names
## http://www.davidpashley.com/articles/writing-robust-shell-scripts.html

## The -u option forces bash to exit when encountering an uninit variable.
## The -e option forces bash to exit when encountering a non-zero exit status.
##   We omit -e as we do our own checking.
set -u;
## == BEGIN Layout variables
_appName=$( basename $0 );
_launchDir=$( pwd );
echo "start ${_appName}";
echo "  > layout vars";

# app path and name
_appLink=$( readlink -f -- "${0}" );
_binDir=$( cd "${_appLink%/*}" && echo "${PWD}" );

# npm modules paths
_npmDir=$( dirname "${_binDir}" );
_modDir="${_npmDir}/node_modules";
_modDirBin="${_modDir}/.bin";

_outDir="${_npmDir}/build";
_topLogName="${_appName}.log";
_topLogFile="${_npmDir}/${_topLogName}";

# cli varibles defaults
_argBuildId='';
_argDoHelp=0;
_argDoVerbose=0;
_argDontCompress=0;
_stageDir='';
_templateDir="${_npmDir}/tmplt";
_tmpDir='';

# executables
_packExe="${_binDir}/superpack";
_ugjsExe="${_modDirBin}/uglifyjs";
_ugcssExe="${_modDirBin}/uglifycss";

# timestamps
_startTimestamp=$(date "+%Y-%m-%d %H:%M:%S");
_dateExt=$(date "+%Y%m%d_%H%M%S");

## BEGIN function to echo to STDERR
_logStderrFn () { echo "$*" >&2; }
## . END function to echo to STDERR

## BEGIN function to print usage
_showHelpFn () {
  _logStderrFn "
NAME : ${_appName}

SYNOPSIS
  ${_appName} [ options ] <manifest_1> <manifest_2> ...
";

  [ "${_argDoVerbose}" -lt 1 ] && _logStderrFn "
Employ the -v or --verbose switch to see more detailed help.
";

  [ "${_argDoVerbose}" -gt 0 ] && _logStderrFn "
DESCRIPTION
  ${_appName} builds a production-ready web site from sources listed
  in manifest files. The output files are placed in as follows:

    - ${_outDir}/<build_id>/stage - Staging area
    - ${_outDir}/<build_id>/dist  - Distribution area

  The output files will have the same basename as the source manifest
  file. Therefore, '${_appName} ex01.${_appName}' will output
  the files with the ex01 prefix as illustrated in the examples.

EXAMPLES
  (1) If the file ex01.${_appName} looks like so:
      ==============
      source:js
      js/foo.js
      ==============

  Then running the following ...

      $ ${_appName} -i 1234 ./ex01.${_appName}

  ... results in the following files in ${_stageDir}:

      js/ex01-min.js  # uglified JS
      js/ex01-raw.js  # concatenated JS
      js/ex01-sp.diag # superpack diagnostics
      js/ex01-sp.js   # superpacked JS


  (2) If the file ex02.${_appName} looks like so:
      ==============
      source:js
      js/foo.js

      source:css
      css/foo.css
      ==============

  Then running the following ...

      $ ${_appName} ./ex02.${_appName}

  results in the following files in ${_stageDir}:
      js/ex02-min.js  # uglified JS
      js/ex02-raw.js  # concatenated JS
      js/ex02-sp.diag # superpack diagnostics
      js/ex02-sp.js   # superpacked JS

      css/ex02-min.css # uglified CSS
      css/ex02-raw.css # concatenated CSS

ARGUMENTS
  manifest_1, manifest_2, ... (REQUIRED)
    Manifests to process. Each manifest lists the source files to
    process. It may have multiple sections delineated by a source-type header.
    ${_appName} expects all paths to be relative to the referencing
    manifest file path.

       sourcetype:js   # for javascript files, and
       # ... js files here ...
       sourcetype:css # for css and source files
       # ... css files here .... (relative to manifest path)

    Blank lines, comment lines, and trailing comments are ignored.

OPTIONS
  * -h | --help | --usage (OPTIONAL)
    Sends short help text to STDERR (usually the terminal) and exits.
    When combined with the -v option, long help is presented.

  * -n | --nocompress (OPTIONAL)
    By default ${_appName} concatenates and minifies CSS and JS files.
    It also SuperPacks JS files. This option turns off this behavior.

  * -v | --verbose (OPTIONAL)
    Be noisy when processing

REQUIRED PATCH
  Buildify uses Superpack symbol compression. Superpack requires a patch
  to UglifyJS. If you have installed **hi\_score** this patch will have
  been applied when running 'bin/xhi setup' which is the safest means
  to apply the patch. If you need to do so manually, this should also work:

    \$ cd ${_modDir}
    \$ patch -p0 < ../patch/uglifyjs-2.4.10.patch

SEE ALSO
  * UglifyJS
  * UglifyCSS

AUTHOR and COPYRIGHT
  Michael S. Mikowski (c) 2008-2017
";

  exit 0;
}
## . END function to print usage

## BEGIN function to log output
_logFn () {
  local IFS='';
  _msg_str="$*";
  if [ -w "${_topLogFile}" ]; then
    echo "${_msg_str}" >> "${_topLogFile}";
  else
    _logStderrFn "${_msg_str}"
  fi

  if [ "${_argDoVerbose}" -gt 0 ]; then _logStderrFn "${_msg_str}"; fi
  return 0;
}
## . END function to log output

## BEGIN function to clean up temp files
_cleanTmpdirFn () {
  if [ -w "${_tmpDir}" ]; then
    if echo "${_tmpDir}" | grep -q "${_appName}"; then
      _argDoVerbose=1;
      _logFn "  > Removed temporary directory ${_tmpDir}";
      rm -rf "${_tmpDir}";
    fi
  fi
}
## . END function to clean up temp files

## BEGIN function to abort processing
_abortFn () {
  _argDoVerbose=1;
  _logFn '';
  _logFn "## See ${_appName} -hv for detailed usage.";
  _logFn "## ! Processing ABORTED.";

  _cleanTmpdirFn;
  # exit with error (bash shell standard)
  exit 1;
}
## . END function to abort processing

## BEGIN MAIN
_main () {
    # temp dir
    # See http://www.linuxsecurity.com/content/view/115462/81/#mozTocId440182
    _tmpDir="${TMPDIR:-/tmp}/$$.${_appName}.${_dateExt}";
    ( umask 077 && mkdir "${_tmpDir}" ) || {
      _argDoVerbose=1;
      _logFn "  ! Could not create temporary directory";
      _abortFn;
    }
  # echo "  < layout vars";
  ## == END Layout variables

  ## BEGIN get options
  ## (see /usr/share/doc/util-linux/examples/getopt-parse.bash)
  _cliStr=$(getopt -o hnvi: \
    --long help,usage,nocompress,verbose,id: \
      -n "${_appName}" -- "$@")

  if [ $? != 0 ] ; then
		_argDoVerbose=1;
    _logStderrFn "  ! Trouble processing command line.";
    _abortFn;
  fi

  # Note the quotes around $_cliStr: they are essential!
  eval set -- "${_cliStr}"

  # Process arguments
  while true; do
    case "$1" in
      -i|--id) shift;    _argBuildId="$1";   shift ;;
      -h|--help|--usage) _argDoHelp=1;       shift ;;
      -n|--nocompress)   _argDontCompress=1; shift ;;
      -v|--verbose)      _argDoVerbose=1;    shift ;;
      --) shift; break ;;
       *) _argDoVerbose=1;
          _logStderrFn "Trouble processing command line.";
          _abortFn;;
    esac
  done
  ## . END get options

  ## BEGIN process options
  if [ ${_argDoHelp} -gt 0 ]; then _showHelpFn; fi
  if [ -z "${_argBuildId}" ]; then
    _logStderrFn "Please provide a build id like so: -i 12345";
    _abortFn;
  fi
  ## . END process options

  _buildDir="${_outDir}/${_argBuildId}"
  _distDir="${_buildDir}/dist";
  _stageDir="${_buildDir}/stage";

  ## BEGIN set global files and directories
  if ! echo -n > "${_topLogFile}"; then
    _argDoVerbose=1;
    _logStderrFn "Cannot create global log file '${_topLogFile}'";
    _abortFn;
  fi
  # put header in log file
  _logFn "  > Global ${_appName} log ${_startTimestamp}";
  ## . END set global files and directories

  ## BEGIN Find SuperPack
  if [ ! -x "${_packExe}" ]; then
    _argDoVerbose=1;
    _logFn "  ! Superpack (${_packExe}) is not excutable";
    _abortFn;
  fi
  if ( ! perl -cw "${_packExe}" >/dev/null 2>&1 ); then
    _argDoVerbose=1;
    _logFn "  ! SuperPack is not valid perl.";
    _logFn "  ! Please install perl-List-MoreUtils perl-File-Slurp: ";
    _logFn "  ! and perl-Getopt-Mixed:";
    _logfn "  !  \$ sudo apt-get install libfile-slurp-perl \\ ";
    _logfn "  !    liblist-moreutils-perl libgetopt-mixed-perl ";
    _abortFn;
  fi
  ## . END Find SUPERPACK

  ## BEGIN Find UglifyJS
  if [ ! -x "${_ugjsExe}" ]; then
    _argDoVerbose=1;
    _logFn "  ! UglifyJS (${_ugjsExe}) is not executable.";
    _logFn "  ! Try cd ${_npmDir}; npm install uglifyjs@2.4.10 -D"
    _logFn "  ! AND THEN ensure the patch is applied (see patch/)"
    _logFn "  ! as described by ${_appName} -hv"
    _abortFn;
  fi
  ## . END Find UglifyJS

  ## BEGIN Find UglifyCSS
  if [ -z "${_ugcssExe}" ]; then
    _argDoVerbose=1;
    _logFn "  ! UglifyCSS (${_ugcssExe}) is not executable.";
    _logFn "  ! Try cd ${_npmDir}; npm install uglifycss -D"
    _abortFn;
  fi
  ## . END Find UglifyCSS

  ## BEGIN validiate input files
  _manifestList=();
  for _arg_file in $@; do
    if [ ! -f "${_arg_file}" ]; then
      _argDoVerbose=1;
      _logFn "  ! manifest file '${_arg_file}' is not a regular file.";
      _abortFn;
    fi

    if [ ! -r "${_arg_file}" ]; then
      _argDoVerbose=1;
      _logFn "  ! manifest file '${_arg_file}' is not readable.";
      _abortFn;
    fi

    _manifestList[${#_manifestList[*]}]="${_arg_file}"
    _logFn "  > Adding ${_arg_file} to manifest list"
  done

  if [ "${#_manifestList[*]}" = 0 ]; then
    _argDoVerbose=1;
    _logFn "  ! No manifest provided."
    _abortFn;
  fi
  ## . END validiate input files

  ## BEGIN ensure builddir and link are up-to-date
  _logFn "  > Processing";
  mkdir -p "${_outDir}";
  if [ -e "${_outDir}/latest" ]; then
    rm "${_outDir}/latest";
  fi

  mkdir -p "${_buildDir}";
  pushd "${_buildDir}";
  ln -s "${_argBuildId}" "${_outDir}/latest";
  popd;
  ## . END ensure builddir and link are up-to-date

  ## BEGIN move top log to build directory
  if [ "${_topLogFile}" != "${_buildDir}/${_topLogName}" ] \
    && ! mv "${_topLogFile}" "${_buildDir}"; then
    _argDoVerbose=1;
    _logFn "  ! Could not move global log to build directory";
    _abortFn;
  else
    _topLogFile="${_buildDir}/${_topLogName}";
  fi
  ## . END move top log to build directory

  ## BEGIN validate dist dir
  if [ -d "${_distDir}" ]; then
    _scratchStr="${_argDoVerbose}";
    _argDoVerbose=1;
    _logFn "The distribution directory ${_distDir} already exists."
    read -p "Wipe and recreate this and /stage? (y/N) " _responseStr;
    _responseStr="${_responseStr^^}";
    if [ "${_responseStr^^:=N}" == 'N' ]; then
      _logFn "  ! Aborted at user request.";
      _abortFn;
    fi
    _logFn '';
    _logFn "  > Removing ${_distDir} and ${_stageDir} at user request";
    rm -rf "${_distDir}"; rm -rf "${_stageDir}";
    _logFn "  > Removal complete.";
    _argDoVerbose="${_scratchStr}"
  fi
  mkdir ${_stageDir};
  mkdir ${_distDir};
  ## . END validate dist dir

  # mkdir -p "${_distDir}/css/vendor";
  # mkdir -p "${_distDir}/js/vendor";
  # mkdir -p "${_distDir}/img/vendor";
  # mkdir -p "${_distDir}/font/vendor";


  ## BEGIN process each manifest in turn
  for (( _file_idx = 0; _file_idx < ${#_manifestList[*]}; _file_idx++ )); do
    ## BEGIN get path of manifest and determine output names
    _manifest_file="${_manifestList[$_file_idx]}";
    _manifest_basename=$( basename "${_manifest_file}" );
    _manifest_short_name=$( echo "${_manifest_basename}" |cut -f1 -d'.' );
    # _manifest_dir=$( dirname "${_manifest_file}" );
    # _manifest_dir=$( cd "${_manifest_dir}" && echo "${PWD}" );

    if [ -z "${_manifest_short_name}" ]; then
      _argDoVerbose=1;
      _logFn "  ! Root name of the manifest is empty.";
      _abortFn;
    fi

    _logFn "  > ${_appName}  for ${_manifest_file} on ${_startTimestamp}";
    ## . END get path of manifest and determine output names

    ## BEGIN read manifest and append sources to arrays
    _js_file_list=();
    _css_file_list=();
    _copy_deploy_list=();
    _subtree_deploy_list=();
    _section_type='';

    while read _row_str; do
      # skip blank lines
      echo "${_row_str}" | grep -q '^\s*$' && continue;
      # skip full-line comments
      echo "${_row_str}" | grep -q '^\s*#' && continue;

      # process section header 'sourcetype'
      if echo "${_row_str}" | grep -q '^sourcetype\s*:'; then
        _section_type=$( echo "${_row_str}" |sed -e 's/sourcetype\s*:\s*//g' );
        _logFn "  > Section: ${_row_str}"
        continue;
      fi

      # skip anything if section type not yet specified
      [ "${_section_type}" == '' ] && continue;

      # strip end of line comments and indents
      _row_str=$(echo "${_row_str}" | sed -e 's/#.*$//g' \
        | sed -e 's/^\s\+//g' | sed -e 's/\s\+$//g' );

      # determine first field, file extension, full-qualified source_file
      _field1_str=$( echo "${_row_str}" |sed -e 's/\s.*$//g' );
      _ext_str=$( echo ${_field1_str} |sed -e 's/^.*\.//' );
      _source_file="${_npmDir}/${_field1_str}";

      # determine full path to source file and test
      if [ ! -r "${_source_file}" ]; then
        _argDoVerbose=1;
        _logFn "  ! ${_section_type} file ${_source_file} is not readable.";
        _logFn "  ! Do you need to update your manifest file?";
        _logFn "  ! X_${_field1_str}_X";
        _abortFn;
      fi

      case "${_section_type}" in
        js)
          if [ "${_ext_str}" != 'js' ]; then
            _argDoVerbose=1;
            _logFn "  > Extension for js file ${_field1_str} must be 'js'";
            _abortFn;
          fi

          _js_file_list[${#_js_file_list[*]}]="${_source_file}";
            _logFn "  > Added file ${_field1_str} to JS queue."
          ;;

        css)
          if [ "${_ext_str}" != 'css' ]; then
            _argDoVerbose=1;
            _logFn "  ! Extension for css file ${_field1_str} must be 'css'";
            _abortFn;
          fi
          _css_file_list[${#_css_file_list[*]}]="${_source_file}";
          _logFn "  > Added file ${_field1_str} to CSS queue.";
          ;;
        subtree)
          _subtree_deploy_list[${#_subtree_deploy_list[*]}]="${_row_str}";
          _logFn "  > Added file ${_field1_str} to SUBTREE DEPLOY queue.";
          ;;
        copy)
          _copy_deploy_list[${#_copy_deploy_list[*]}]="${_row_str}"
          _logFn "  > Added row ${_row_str} to COPY DEPLOY queue.";
          ;;
        *) _argDoVerbose=1;
          _logFn "  ! Source type (${_section_type}) not supported.";
          _abortFn;
          ;;
      esac
    done < "${_manifest_file}"
    ## . END read manifest and append sources to arrays

    ## BEGIN determine paths
    _js_concat_file="${_tmpDir}/$$.${_manifest_short_name}-src.js";
    _css_concat_file="${_tmpDir}/$$.${_manifest_short_name}-src.css";

    _stage_base_name="${_stageDir}/${_manifest_short_name}";

    _pack_log_file="${_stage_base_name}-sp.log";
    _pack_diag_file="${_stage_base_name}-sp.diag";
    _ugcss_log_file="${_stage_base_name}-ug_css.log";
    _ugjs_log_file="${_stage_base_name}-ug_js.log";

    _css_out_file="${_stage_base_name}-raw.css";
    _js_out_file="${_stage_base_name}-raw.js";
    _ugcss_out_file="${_stage_base_name}-min.css";
    _ugjs_out_file="${_stage_base_name}-min.js";
    _pack_out_file="${_stage_base_name}-sp.js";
    touch "${_pack_log_file}";
    ## . END determine paths


    ## BEGIN process javascript files
    for (( _i = 0; _i < ${#_js_file_list[*]}; _i++ ))
    do
      if [ ! -r "${_js_concat_file}" ]; then
        touch "${_js_concat_file}";
        if [ ! -r "${_js_concat_file}" ]; then
          _argDoVerbose=1;
          _logFn "Cannot create concatenation file '${_js_concat_file}'";
          _logFn "for Javascript processing."
          _abortFn;
        fi
        _logFn "  > Combining JS Source Files";
      fi
      cat "${_js_file_list[$_i]}" >> "${_js_concat_file}";
      _logFn "  > ${_js_file_list[$_i]}";
    done
    ## . END process javascript files

    ## BEGIN compress javascript file if specified
    if [ -r "${_js_concat_file}" ] && [ ${_argDontCompress} -eq 0 ]; then
      _logFn "  > Uglify compressing '${_js_concat_file}'";

      ${_ugjsExe} "${_js_concat_file}" -mc \
        1>  "${_ugjs_out_file}" \
        2>> "${_ugjs_log_file}";
      _ugjs_exit_code=$?;

      if [ ${_ugjs_exit_code} == 0 ]; then
        _logFn "  > Compression successful. Output is '${_ugjs_out_file}'";
        # rm "${_ugjs_log_file}";
      else
        _argDoVerbose=1;
        _logFn "  ! Compression of '${_js_concat_file}' not successfull";
        _logFn "  ! See '${_ugjs_log_file}' for errors";
        _abortFn;
      fi
    fi
    ## . END compress javascript file if specified

    ## BEGIN superpack javascript file if specified
    if [ -r "${_js_concat_file}" ] && [ ${_argDontCompress} -eq 0 ]; then
      ${_packExe} \
        -i "${_ugjs_out_file}" \
        -o "${_pack_out_file}" \
        -l "${_pack_log_file}" \
        > ${_pack_diag_file} 2>&1
      _pack_exit_code=$?;

      if [ ${_pack_exit_code} == 0 ]; then
        _logFn "  > SuperPack successful. Output is '${_pack_out_file}'";
      else
        _argDoVerbose=1;
        _logFn "  ! SuperPack of '${_js_concat_file}' not successfull";
        _logFn "  ! See '${_pack_log_file}' for errors";
        _abortFn;
      fi
    fi
    ## . END superpack javascript file if specified

    ## BEGIN process css files
    for (( _i = 0; _i < ${#_css_file_list[*]}; _i++ ))
    do
      if [ ! -r "${_css_concat_file}" ]; then
        touch "${_css_concat_file}";
        if [ ! -r "${_css_concat_file}" ]; then
          _argDoVerbose=1;
          _logFn "  ! Cannot create concatenation file '${_css_concat_file}'";
          _logFn "  ! for CSS processing.";
          _abortFn;
        fi
        _logFn "  > Combining CSS Source Files";
        _logFn "  > Writing css concat file '${_css_concat_file}'";
      fi
      cat "${_css_file_list[$_i]}" >> "${_css_concat_file}";
      _logFn "  >> ${_css_file_list[$_i]}";
    done
    ## . END process css files

    ## BEGIN compress css file if specified
    if [ -r "${_css_concat_file}" ] && [ ${_argDontCompress} -eq 0 ]; then
      _logFn "  > UglifyCSS Compressing '${_css_concat_file}'";

      ${_ugcssExe} "${_css_concat_file}" \
        1> "${_ugcss_out_file}" \
        2>> "${_ugcss_log_file}";
      _ugcss_exit_code=$?;

      if [ ${_ugcss_exit_code} == 0 ]; then
        _logFn "  > Compression successful. Output is '${_ugcss_out_file}'";
        # rm "${_ugcss_log_file}";
      else
        _argDoVerbose=1;
        _logFn "  ! Compression of '${_css_concat_file}' not successfull";
        _logFn "  ! See '${_ugcss_log_file}' for warnings";
        _abortFn;
      fi
    fi
    ## . END compress css file if specified

    ## BEGIN move over remaining files
    for _pair_str in \
      "${_js_concat_file}|${_js_out_file}" \
      "${_css_concat_file}|${_css_out_file}";
    do
      _pair_src_file=$(echo "${_pair_str}" |cut -f1 -d'|');
      _pair_dst_file=$(echo "${_pair_str}" |cut -f2 -d'|');

      if [ -r "${_pair_src_file}" ]; then
        if ! mv "${_pair_src_file}" "${_pair_dst_file}"; then
          _argDoVerbose=1;
          _logFn "Could not move ${_pair_src_file} to ${_pair_dst_file}";
          _abortFn;
        fi
      fi
    done
    ## . END move over remaining files

    ## BEGIN deployment
    mkdir -p "${_distDir}/css";
    mkdir -p "${_distDir}/js";
    cp "${_ugcss_out_file}" "${_distDir}/css/"
    cp "${_pack_out_file}" "${_distDir}/js/"

    ## BEGIN subtree deployment
    for (( _i = 0; _i < ${#_subtree_deploy_list[*]}; _i++ ))
    do
      _row_str="${_subtree_deploy_list[$_i]}";

      _base_dirname=$( dirname "${_row_str}" );
      _src_dirname="${_npmDir}/${_row_str}";
      _tgt_dirname="${_distDir}/${_base_dirname}";

      if [ ! -d "${_src_dirname}" ]; then
        _logStderrFn "Cannot copy subtree |${_row_str}|: Not found";
        continue;
      fi

      mkdir -p "${_tgt_dirname}";
      cp -a "${_src_dirname}" "${_tgt_dirname}/";
    done
    ## . END subtree deployment

    ## BEGIN copy deployment
    for (( _i = 0; _i < ${#_copy_deploy_list[*]}; _i++ ))
    do
      _row_str="${_copy_deploy_list[$_i]}";

      _src_str=$(echo "${_row_str}" | cut -f1 -d' ' );
      _tgt_str=$(echo "${_row_str}" | cut -f2 -d' ' );

      _src_filename="${_npmDir}/${_src_str}";
      _tgt_dirname="${_distDir}/${_tgt_str}";

      if [ ! -f "${_src_filename}" ]; then
        _logStderrFn "Cannot copy file |${_src_filename}|: Not found";
        continue;
      fi

      mkdir -p "${_tgt_dirname}";
      cp "${_src_filename}" "${_tgt_dirname}";
    done
    ## . END copy deployment

  done
  ## . END process each manifest in turn

  _cleanTmpdirFn;
  _endTimestamp=$(date "+%Y-%m-%d %H:%M:%S");
  _logFn "  > ${_appName} run complete on ${_endTimestamp}";
  echo "end ${_appName}";
}
## . END MAIN

_main $@;


